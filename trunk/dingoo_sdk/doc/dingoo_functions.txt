ap_lcd_set_frame
lcd_set_frame
lcd_get_frame
void delay_ms(uint32_t);
lcd_get_bpp
void* lcd_get_cframe()
lcd_flip
kbd_get_key
kbd_get_status
open_gui_key_msg
tv_get_openflag
tv_set_openflag
tv_get_closeflag
tv_set_closeflag
tv_disable_switch
tv_enable_switch
Read_Acc0
Memsic_SerialCommInit
Read_Acc
Custom_Memsic_test
Get_X
Get_Y
sys_judge_event
SysDisableBkLight
SysEnableShutDownPower
SysDisableCloseBkLight
void* _lcd_get_frame();
void  _lcd_set_frame();
int _sys_judge_event();
void         _kbd_get_status(KEY_STATUS*)
unsigned int _kbd_get_key();
_waveout_open
_waveout_set_volume
jz_pm_pllconvert
strncasecmp
sys_get_ccpmp_config
vxGoHome
cmGetSysModel
cmGetSysVersion
fsys_fopen_flash
fsys_fclose_flash
get_dl_handle
get_game_vol
get_current_language
fsys_fopen
fsys_fclose
fsys_fread
fsys_remove
fsys_fwrite
fsys_fseek
fsys_ftell
fsys_feof
fsys_ferror
fsys_clearerr
int fsys_findfirst(const char*, int, fsys_file_info_t*);
int fsys_findnext(fsys_file_info_t*);
int fsys_findclose(fsys_file_info_t*);
fsys_mkdir
fsys_rename
fsys_flush_cache
fsys_RefreshCache
fsys_fopenW
fsys_fcloseW
fsys_removeW
fsys_renameW
USB_Connect
USB_No_Connect
tv_open
tv_close
isTVON
pcm_ioctl
void mdelay(uint32_t);
HP_Mute_sw
pcm_can_write
waveout_open
waveout_close_at_once
waveout_write
waveout_close
waveout_can_write
waveout_set_volume
av_reg_object
av_unreg_object
av_queue_get
av_uft8_2_unicode
av_resize_packet
av_upper_4cc
av_begin_thread
av_end_thread
av_create_sem
av_wait_sem
av_wait_sem2
av_give_sem
av_destroy_sem
av_create_flag
av_wait_flag
av_give_flag
av_destroy_flag
av_delay
av_queue_init
av_queue_flush
av_queue_abort
av_queue_end
av_queue_put
dl_load
dl_free
dl_res_open
dl_res_get_size
dl_res_get_data
dl_res_close
dl_get_proc
memcpy
memset
void abort();
int fprintf(FILE*, const char*, ...);
size_t fread(void*, size_t, size_t, FILE*);
void free(void*);
int fseek(FILE*, long int, int);
size_t fwrite(const void*, size_t, size_t, FILE*);
void* malloc(size_t);
int printf(const char*, ...);
void* realloc(void*, size_t);
int sprintf(char*, const char*, ...);
sscanf
vsprintf
int              GUI_TIMER_Exec(void);
void             GUI_Lock(void); 
void             GUI_Unlock(void); 
GUI_TIMER_HANDLE GUI_TIMER_Create(GUI_TIMER_CALLBACK* cb, int Time, U32 Context, int Flags);
void             GUI_TIMER_Delete(GUI_TIMER_HANDLE hObj);
void             GUI_TIMER_SetPeriod(GUI_TIMER_HANDLE hObj, GUI_TIMER_TIME Period);
void             GUI_TIMER_Restart(GUI_TIMER_HANDLE hObj);
LCD_Color2Index
LCD_GetXSize
LCD_GetYSize
WM_CreateWindow
WM_DeleteWindow
WM_SelectWindow
WM_DefaultProc
WM__SendMessage
WM_SetFocus
U8TOU32
void __icache_invalidate_all();
void __dcache_writeback_all();
LcdGetDisMode
void free_irq(unsigned int irq);
spin_lock_irqsave
spin_unlock_irqrestore
void detect_clock();
udelay
void serial_putc(const char c);
serial_puts
int  serial_getc();
TaskMediaFunStop
StartSwTimer
GetTickCount
OS_CPU_SR OSCPUSaveSR();
void      OSCPURestoreSR(OS_CPU_SR cpu_sr);
OSFlagPost
OSQCreate
OSSemDel
OSSemPend
OSSemPost
OSSemCreate
OSTaskCreate
OSTaskDel
OSTimeDly
OSTimeGet
U8TOU16
_tcscmp
_tcscpy
wchar_t* __to_unicode_le(char*)
char* __to_locale_ansi(wchar_t*)
udc_attached
g_pGameDecodeBuf